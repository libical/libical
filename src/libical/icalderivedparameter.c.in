/*======================================================================
 FILE: icalderivedparameters.{c,h}
 CREATOR: eric 09 May 1999

 SPDX-FileCopyrightText: 2000, Eric Busboom <eric@civicknowledge.com>
 SPDX-License-Identifier: LGPL-2.1-only OR MPL-2.0

 Contributions from:
    Graham Davison (g.m.davison@computer.org)
======================================================================*/
/*#line 29 "icalparameter.c.in"*/
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "icalderivedparameter.h"
#include "icalparameter.h"
#include "icalparameterimpl.h"
#include "icalerror.h"
#include "icalmemory.h"
#include "icaltime.h"

#include <stdlib.h>
#include <string.h>

struct icalparameter_impl *icalparameter_new_impl(icalparameter_kind kind);

/* This map associates each of the parameters with the string
   representation of the parameter's name */
struct icalparameter_kind_map
{
    icalparameter_kind kind;
    const char *name;

    icalvalue_kind value_kind;
    unsigned int flags;
};

#define ICAL_PARAMETER_IS_MULTIVALUED (1U<<0)

/* This map associates the enumerations for the VALUE parameter with
   the kinds of VALUEs. */

struct icalparameter_value_kind_map
{
    icalparameter_value value;
    icalvalue_kind kind;
};

/* This map associates the parameter enumerations with a specific parameter
   and the string representation of the enumeration */

struct icalparameter_map
{
    icalparameter_kind kind;
    int enumeration;
    const char *str;
};

<insert_code_here>

icalvalue_kind icalparameter_kind_value_kind(const icalparameter_kind kind,
                                               int *is_multivalued)
{
    int i, num_params;

    num_params = (int)(sizeof(parameter_map) / sizeof(parameter_map[0]));
    for (i = 0; i < num_params; i++) {
        if (parameter_map[i].kind == kind) {
            if (is_multivalued) {
                *is_multivalued =
                    (int)(parameter_map[i].flags & ICAL_PARAMETER_IS_MULTIVALUED);
            }
            return (parameter_map[i].value_kind);
        }
    }

    return 0;
}

bool icalparameter_kind_is_valid(const icalparameter_kind kind)
{
    int i = 0;
    int num_params = (int)(sizeof(parameter_map) / sizeof(parameter_map[0]));

    if (kind == ICAL_ANY_PARAMETER) {
        return false;
    }

    num_params--;
    do {
        if (parameter_map[i].kind == kind) {
            return true;
        }
    } while (i++ < num_params);

    return false;
}
const char *icalparameter_kind_to_string(icalparameter_kind kind)
{
    int i, num_params;

    num_params = (int)(sizeof(parameter_map) / sizeof(parameter_map[0]));
    for (i = 0; i < num_params; i++) {
        if (parameter_map[i].kind == kind) {
            return parameter_map[i].name;
        }
    }

    return 0;
}

int icalparameter_compare_kind_map(const struct icalparameter_kind_map *a,
                                   const struct icalparameter_kind_map *b)
{
    return strcasecmp(a->name, b->name);
}

icalparameter_kind icalparameter_string_to_kind(const char *string)
{
    struct icalparameter_kind_map key;
    struct icalparameter_kind_map *result;

    if (string == 0) {
        return ICAL_NO_PARAMETER;
    }

    key.kind = ICAL_ANY_PARAMETER;
    key.name = string;
    key.value_kind = ICAL_NO_VALUE;
    key.flags = 0;
    result =
        bsearch(&key, parameter_map, sizeof(parameter_map) / sizeof(struct icalparameter_kind_map),
                sizeof(struct icalparameter_kind_map),
                (int (*)(const void *, const void *))icalparameter_compare_kind_map);

    if (result) {
        return result->kind;
    }

    if (strncmp(string, "X-", 2) == 0) {
        return ICAL_X_PARAMETER;
    }

    if (ical_get_unknown_token_handling_setting() == ICAL_TREAT_AS_ERROR) {
        return ICAL_NO_PARAMETER;
    } else {
        return ICAL_IANA_PARAMETER;
    }
}

icalvalue_kind icalparameter_value_to_value_kind(icalparameter_value value)
{
    int i;

    for (i = 0; value_kind_map[i].kind != ICAL_NO_VALUE; i++) {

        if (value_kind_map[i].value == value) {
            return value_kind_map[i].kind;
        }
    }

    return ICAL_NO_VALUE;
}

const char *icalparameter_enum_to_string(int e)
{
    int i, num_params;

    icalerror_check_arg_rz(e >= ICALPARAMETER_FIRST_ENUM, "e");
    icalerror_check_arg_rz(e <= ICALPARAMETER_LAST_ENUM, "e");

    num_params = (int)(sizeof(icalparameter_map) / sizeof(icalparameter_map[0]));
    for (i = 0; i < num_params; i++) {
        if (e == icalparameter_map[i].enumeration) {
            return icalparameter_map[i].str;
        }
    }

    return 0;
}

int icalparameter_string_to_enum(const char *str)
{
    int i, num_params;

    icalerror_check_arg_rz(str != 0, "str");

    num_params = (int)(sizeof(icalparameter_map) / sizeof(icalparameter_map[0]));
    for (i = 0; i < num_params; i++) {
        if (strcasecmp(str, icalparameter_map[i].str) == 0) {
            return icalparameter_map[i].enumeration;
        }
    }

    return 0;
}


static icalarray *icalparameter_values_from_value_string(icalparameter_kind kind, const char *val)
{
    icalvalue_kind value_kind = icalparameter_kind_value_kind(kind, NULL);
    icalarray *values;
    int enum_start = 0, enum_end = 0;

    if (value_kind == ICAL_TEXT_VALUE) {
        values = icalstrarray_new(5);
    } else {
        values = icalenumarray_new(5);
    }

    if (value_kind != ICAL_TEXT_VALUE) {
        int i;
        int num_params = (int)(sizeof(icalparameter_map) / sizeof(icalparameter_map[0]));
        for (i = 0; i < num_params && !enum_end; i++) {
            if (kind == icalparameter_map[i].kind && !enum_start)
                enum_start = i;
            else if (kind != icalparameter_map[i].kind && enum_start)
                enum_end = i;
        }
    }

    do {
        int i;
        size_t val_len;
        char *tmpbuf;
        const char *next_val;
        const char *end = val;
        icalenumarray_element elem;
        if (val[0] == '"') {
            end = strchr(val + 1, '"');
            if (end) val++;
        }
        else {
            end = strchr(val, ',');
        }
        val_len = end ? (size_t)(end - val) : strlen(val);

        if (!val_len) break;

        next_val = end;
        if (next_val && next_val[0] == '"')
            next_val = strchr(next_val, ',');

        if (next_val && next_val[0] == ',')
            next_val++;

        tmpbuf = icalmemory_new_buffer(val_len + 1);
        strncpy(tmpbuf, val, val_len);
        icalparameter_decode_value(tmpbuf);

        if (value_kind == ICAL_TEXT_VALUE) {
            icalstrarray_append(values, tmpbuf);
        } else {
            elem.val = 0; elem.xvalue = NULL;
            for (i = enum_start; i < enum_end; i++) {
                if (strncasecmp(val, icalparameter_map[i].str, val_len) == 0) {
                    elem.val = (int)icalparameter_map[i].enumeration;
                    break;
                }
            }

            if (!elem.val) elem.xvalue = tmpbuf;
            icalenumarray_append(values, &elem);
        }

        icalmemory_free_buffer(tmpbuf);

        val = next_val;
    } while (val);

    return values;
}

icalparameter *icalparameter_new_from_value_string(icalparameter_kind kind, const char *val)
{
    struct icalparameter_impl *param = 0;
    int found_kind = 0;
    int i, num_params;

    icalerror_check_arg_rz((val != 0), "val");

    /* Search through the parameter map to find a matching kind */

    param = icalparameter_new_impl(kind);
    if (!param) {
        return 0;
    }

    if (kind == ICAL_GAP_PARAMETER) {
        param->duration = icaldurationtype_from_string(val);
        return param;
    }
    else if (icalparameter_is_multivalued(param)) {
        param->values = icalparameter_values_from_value_string(kind, val);
        return param;
    }

    num_params = (int)(sizeof(icalparameter_map) / sizeof(icalparameter_map[0]));
    for (i = 0; i < num_params; i++) {
        if (kind == icalparameter_map[i].kind) {
            found_kind = 1;
            if (strcasecmp(val, icalparameter_map[i].str) == 0) {

                param->data = (int)icalparameter_map[i].enumeration;
                return param;
            }
        }
    }

    if (found_kind == 1) {
        /* The kind was in the parameter map, but the string did not
           match, so assume that it is an alternate value, like an
           X-value. */

        icalparameter_set_xvalue(param, val);

    } else {

        /* If the kind was not found, then it must be a string type */

        ((struct icalparameter_impl *)param)->string = icalmemory_strdup(val);
    }

    return param;
}
