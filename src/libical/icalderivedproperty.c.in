/*======================================================================
 FILE: icalderivedproperty.c
 CREATOR: eric 09 May 1999

 (C) COPYRIGHT 1999, Eric Busboom <eric@softwarestudio.org>

 This program is free software; you can redistribute it and/or modify
 it under the terms of either:

    The LGPL as published by the Free Software Foundation, version
    2.1, available at: http://www.gnu.org/licenses/lgpl-2.1.html

  Or:

    The Mozilla Public License Version 1.0. You may obtain a copy of
    the License at http://www.mozilla.org/MPL/
 ======================================================================*/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "icalderivedproperty.h"
#include "icalproperty.h"
#include "icalcomponent.h"
#include "icalerror.h"
#include "icalmemory.h"
#include "icaltimezone.h"

#include <string.h>

/* This map associates the property kinds with the string
   representation of the property name and the kind of VALUE that the
   property uses as a default */

struct icalproperty_map
{
    icalproperty_kind kind;
    const char *name;
    icalvalue_kind value;

};

/* This map associates the property enumerations with the king of
   property that they are used in and the string representation of the
   enumeration */

struct icalproperty_enum_map
{
    icalproperty_kind prop;
    int prop_enum;
    const char *str;
};

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wvarargs"
<insert_code_here>
#pragma clang diagnostic pop

int icalproperty_kind_is_valid(const icalproperty_kind kind)
{
    int i = 0;

    do {
        if (property_map[i].kind == kind)
            return 1;
    } while (property_map[i++].kind != ICAL_NO_PROPERTY);

    return 0;
}

const char *icalproperty_kind_to_string(icalproperty_kind kind)
{
    int i;

    for (i = 0; property_map[i].kind != ICAL_NO_PROPERTY; i++) {
        if (property_map[i].kind == kind) {
            return property_map[i].name;
        }
    }

    return 0;
}

icalproperty_kind icalproperty_string_to_kind(const char *string)
{
    int i;

    if (string == 0) {
        return ICAL_NO_PROPERTY;
    }

    for (i = 0; property_map[i].kind != ICAL_NO_PROPERTY; i++) {
        if (strcasecmp(property_map[i].name, string) == 0) {
            return property_map[i].kind;
        }
    }

    if (strncmp(string, "X-", 2) == 0) {
        return ICAL_X_PROPERTY;
    }

    return ICAL_NO_PROPERTY;
}

icalproperty_kind icalproperty_value_kind_to_kind(icalvalue_kind kind)
{
    int i;

    for (i = 0; property_map[i].kind != ICAL_NO_PROPERTY; i++) {
        if (property_map[i].value == kind) {
            return property_map[i].kind;
        }
    }

    return ICAL_NO_PROPERTY;
}

icalvalue_kind icalproperty_kind_to_value_kind(icalproperty_kind kind)
{
    int i;

    for (i = 0; property_map[i].kind != ICAL_NO_PROPERTY; i++) {
        if (property_map[i].kind == kind) {
            return property_map[i].value;
        }
    }

    return ICAL_NO_VALUE;
}

const char *icalproperty_enum_to_string(int e)
{
    icalerror_check_arg_rz(e >= ICALPROPERTY_FIRST_ENUM, "e");
    icalerror_check_arg_rz(e <= ICALPROPERTY_LAST_ENUM, "e");

    return enum_map[e - ICALPROPERTY_FIRST_ENUM].str;
}

char *icalproperty_enum_to_string_r(int e)
{
    return icalmemory_strdup(icalproperty_enum_to_string(e));
}

int icalproperty_kind_and_string_to_enum(const int kind, const char *str)
{
    icalproperty_kind pkind;
    int i;

    icalerror_check_arg_rz(str != 0, "str");

    if ((pkind = icalproperty_value_kind_to_kind(kind)) == ICAL_NO_PROPERTY)
        return 0;

    while (*str == ' ') {
        str++;
    }

    for (i = ICALPROPERTY_FIRST_ENUM; i != ICALPROPERTY_LAST_ENUM; i++) {
        if (enum_map[i - ICALPROPERTY_FIRST_ENUM].prop == pkind)
            break;
    }
    if (i == ICALPROPERTY_LAST_ENUM)
        return 0;

    for (; i != ICALPROPERTY_LAST_ENUM; i++) {
        if (enum_map[i - ICALPROPERTY_FIRST_ENUM].prop == pkind &&
            strcasecmp(enum_map[i - ICALPROPERTY_FIRST_ENUM].str, str) == 0) {
            return enum_map[i - ICALPROPERTY_FIRST_ENUM].prop_enum;
        }
    }

    return 0;
}

int icalproperty_enum_belongs_to_property(icalproperty_kind kind, int e)
{
    int i;

    for (i = ICALPROPERTY_FIRST_ENUM; i != ICALPROPERTY_LAST_ENUM; i++) {
        if (enum_map[i - ICALPROPERTY_FIRST_ENUM].prop_enum == e &&
            enum_map[i - ICALPROPERTY_FIRST_ENUM].prop == kind) {
            return 1;
        }
    }

    return 0;
}

const char *icalproperty_method_to_string(icalproperty_method method)
{
    icalerror_check_arg_rz(method >= ICAL_METHOD_X, "method");
    icalerror_check_arg_rz(method <= ICAL_METHOD_NONE, "method");

    return enum_map[method - ICALPROPERTY_FIRST_ENUM].str;
}

icalproperty_method icalproperty_string_to_method(const char *str)
{
    int i;

    icalerror_check_arg_rx(str != 0, "str", ICAL_METHOD_NONE);

    while (*str == ' ') {
        str++;
    }

    for (i = ICAL_METHOD_X - ICALPROPERTY_FIRST_ENUM;
         i != ICAL_METHOD_NONE - ICALPROPERTY_FIRST_ENUM; i++) {
        if (strcasecmp(enum_map[i].str, str) == 0) {
            return (icalproperty_method) enum_map[i].prop_enum;
        }
    }

    return ICAL_METHOD_NONE;
}

const char *icalenum_status_to_string(icalproperty_status status)
{
    icalerror_check_arg_rz(status >= ICAL_STATUS_X, "status");
    icalerror_check_arg_rz(status <= ICAL_STATUS_NONE, "status");

    return enum_map[status - ICALPROPERTY_FIRST_ENUM].str;
}

icalproperty_status icalenum_string_to_status(const char *str)
{
    int i;

    icalerror_check_arg_rx(str != 0, "str", ICAL_STATUS_NONE);

    while (*str == ' ') {
        str++;
    }

    for (i = ICAL_STATUS_X - ICALPROPERTY_FIRST_ENUM;
         i != ICAL_STATUS_NONE - ICALPROPERTY_FIRST_ENUM; i++) {
        if (strcasecmp(enum_map[i].str, str) == 0) {
            return (icalproperty_status) enum_map[i].prop_enum;
        }
    }

    return ICAL_STATUS_NONE;
}
