/*======================================================================
 FILE: vcardderivedvalue.c

======================================================================*/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "vcardderivedvalue.h"
#include "vcardvalue.h"
#include "vcardvalueimpl.h"
#include "icalerror.h"
#include "icalmemory.h"

#include <errno.h>
#include <stdlib.h>
#include <string.h>

struct vcardvalue_impl *vcardvalue_new_impl(vcardvalue_kind kind);

/* This map associates each of the value types with its string
   representation */
struct vcardvalue_kind_map
{
    vcardvalue_kind kind;
    char name[20];
};

<insert_code_here>

vcardvalue *vcardvalue_new_structured(vcardstructuredtype *v)
{
    struct vcardvalue_impl *impl;
    icalerror_check_arg_rz((v != 0), "v");

    impl = vcardvalue_new_impl(VCARD_STRUCTURED_VALUE);
    vcardvalue_set_structured((vcardvalue *)impl, v);
    return (vcardvalue*)impl;
}

void vcardvalue_set_structured(vcardvalue *value, vcardstructuredtype *v)
{
    struct vcardvalue_impl *impl;
    unsigned i;

    icalerror_check_arg_rv((value != 0), "value");
    icalerror_check_arg_rv((v != 0), "v");

    icalerror_check_value_type(value, VCARD_STRUCTURED_VALUE);
    impl = (struct vcardvalue_impl *)value;

    impl->data.v_structured.num_fields = v->num_fields;
    for (i = 0; i < v->num_fields; i++) {
        impl->data.v_structured.field[i] = v->field[i];
    }

    vcardvalue_reset_kind(impl);
}

vcardstructuredtype *vcardvalue_get_structured(const vcardvalue *value)
{
    icalerror_check_arg((value != 0), "value");
    icalerror_check_value_type(value, VCARD_STRUCTURED_VALUE);
    return &((struct vcardvalue_impl *)value)->data.v_structured;
}

int vcardvalue_kind_is_valid(const vcardvalue_kind kind)
{
    int i = 0;
    int num_values = (int)(sizeof(value_map) / sizeof(value_map[0]));

    if (kind == VCARD_ANY_VALUE) {
        return 0;
    }

    num_values--;
    do {
        if (value_map[i].kind == kind) {
            return 1;
        }
    } while (i++ < num_values);

    return 0;
}

const char *vcardvalue_kind_to_string(const vcardvalue_kind kind)
{
    int i, num_values;

    num_values = (int)(sizeof(value_map) / sizeof(value_map[0]));
    for (i = 0; i < num_values; i++) {
        if (value_map[i].kind == kind) {
            return value_map[i].name;
        }
    }

    return 0;
}

vcardvalue_kind vcardvalue_string_to_kind(const char *str)
{
    int i, num_values;

    if (str == 0) {
        return VCARD_NO_VALUE;
    }

    num_values = (int)(sizeof(value_map) / sizeof(value_map[0]));
    for (i = 0; i < num_values; i++) {
        if (strcasecmp(value_map[i].name, str) == 0) {
            return value_map[i].kind;
        }
    }

    return VCARD_NO_VALUE;
}

vcardvalue *vcardvalue_new_x(const char *v)
{
    struct vcardvalue_impl *impl;

    icalerror_check_arg_rz((v != 0), "v");

    impl = vcardvalue_new_impl(VCARD_X_VALUE);

    vcardvalue_set_x((vcardvalue *) impl, v);
    return (vcardvalue *) impl;
}

void vcardvalue_set_x(vcardvalue *impl, const char *v)
{
    icalerror_check_arg_rv((impl != 0), "value");
    icalerror_check_arg_rv((v != 0), "v");

    if (impl->x_value != 0) {
        icalmemory_free_buffer((void *)impl->x_value);
    }

    impl->x_value = icalmemory_strdup(v);

    if (impl->x_value == 0) {
        errno = ENOMEM;
    }
}

const char *vcardvalue_get_x(const vcardvalue *value)
{
    icalerror_check_arg_rz((value != 0), "value");
    icalerror_check_value_type(value, VCARD_X_VALUE);
    return value->x_value;
}

/* The remaining interfaces are 'new', 'set' and 'get' for each of the value
   types */

/* Everything below this line is machine generated. Do not edit. */
