/*======================================================================
 File: vcardrestriction.c

 ======================================================================*/


#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "vcardrestriction.h"
#include "icalerror.h"

#include <assert.h>

/* Define the structs for the restrictions. these data are filled out
in machine generated code below */

struct vcardrestriction_record;

typedef const char *(*restriction_func) (const struct vcardrestriction_record * rec,
                                         vcardcomponent *comp, vcardproperty *prop);

typedef struct vcardrestriction_record
{
    vcardproperty_version version;
    vcardcomponent_kind component;
    vcardproperty_kind property;
    vcardcomponent_kind subcomponent;
    vcardrestriction_kind restriction;
    restriction_func function;
} vcardrestriction_record;

static const vcardrestriction_record *vcardrestriction_get_restriction(
    const vcardrestriction_record *start,
    vcardproperty_version version, vcardcomponent_kind component,
    vcardproperty_kind property, vcardcomponent_kind subcomp);

static const vcardrestriction_record null_restriction_record =
    { VCARD_VERSION_NONE, VCARD_NO_COMPONENT,
      VCARD_NO_PROPERTY, VCARD_NO_COMPONENT, VCARD_RESTRICTION_UNKNOWN, NULL };

/** Each row gives the result of comparing a restriction against a count.
   The columns in each row represent 0,1,2+. '-1' indicates
   'invalid, 'don't care' or 'needs more analysis' So, for
   VCARD_RESTRICTION_ONE, if there is 1 of a property with that
   restriction, it passes, but if there are 0 or 2+, it fails. */

static const char compare_map[VCARD_RESTRICTION_UNKNOWN + 1][3] = {
    {1, 1, 1}, /*VCARD_RESTRICTION_NONE */
    {1, 0, 0}, /*VCARD_RESTRICTION_ZERO */
    {0, 1, 0}, /*VCARD_RESTRICTION_ONE */
    {1, 1, 1}, /*VCARD_RESTRICTION_ZEROPLUS */
    {0, 1, 1}, /*VCARD_RESTRICTION_ONEPLUS */
    {1, 1, 0}, /*VCARD_RESTRICTION_ZEROORONE */
    {1, 1, 0}, /*VCARD_RESTRICTION_ONEEXCLUSIVE */
    {1, 1, 0}, /*VCARD_RESTRICTION_ONEMUTUAL */
    {1, 1, 1}  /*VCARD_RESTRICTION_UNKNOWN */
};

static const char restr_string_map[VCARD_RESTRICTION_UNKNOWN + 1][60] = {
    "unknown number", /*VCARD_RESTRICTION_NONE */
    "0", /*VCARD_RESTRICTION_ZERO */
    "1", /*VCARD_RESTRICTION_ONE */
    "zero or more", /*VCARD_RESTRICTION_ZEROPLUS */
    "one or more", /*VCARD_RESTRICTION_ONEPLUS */
    "zero or one", /*VCARD_RESTRICTION_ZEROORONE */
    "zero or one, exclusive with another property", /*VCARD_RESTRICTION_ONEEXCLUSIVE */
    "zero or one, mutual with another property", /*VCARD_RESTRICTION_ONEMUTUAL */
    "unknown number"    /*VCARD_RESTRICTION_UNKNOWN */
};

int vcardrestriction_compare(vcardrestriction_kind restr, int count)
{
    /* restr is an unsigned int and VCARD_RESTRICTION_NONE == 0,
       so no need to check if restr < VCARD_RESTRICTION_NONE */
    if (restr > VCARD_RESTRICTION_UNKNOWN || count < 0) {
        return -1;
    }

    if (count > 2) {
        count = 2;
    }

    return compare_map[restr][count];
}

static int _check_restriction(vcardcomponent *comp,
                              const vcardrestriction_record *record,
                              int count, vcardproperty *prop)
{
    vcardrestriction_kind restr;
    const char *funcr = 0;
    int compare;

    restr = record->restriction;

    if (restr == VCARD_RESTRICTION_ONEEXCLUSIVE ||
        restr == VCARD_RESTRICTION_ONEMUTUAL) {

        /* First treat is as a 0/1 restriction */
        restr = VCARD_RESTRICTION_ZEROORONE;
    }

    compare = vcardrestriction_compare(restr, count);

    assert(compare != -1);

    if (compare == 0) {
#define TMP_BUF_SIZE 1024
        char temp[TMP_BUF_SIZE];
        vcardproperty *errProp;
        vcardparameter *errParam;
        const char *type, *kind;

        if (record->subcomponent != VCARD_NO_COMPONENT) {
            type = "component";
            kind = vcardcomponent_kind_to_string(record->subcomponent);
        } else {
            type = "property";
            kind = vcardproperty_kind_to_string(record->property);
        }

        snprintf(temp, TMP_BUF_SIZE,
                 "Failed restrictions for %s %s. "
                 "Expected %s instances of the %s and got %d",
                 kind, type, restr_string_map[restr], type, count);
        errParam =
            vcardparameter_new_xlicerrortype(VCARD_XLICERRORTYPE_RESTRICTIONCHECK);
        errProp = vcardproperty_vanew_xlicerror(temp, errParam, 0);
        vcardcomponent_add_property(comp, errProp);
        vcardproperty_free(errProp);
    }

    if (record->function != NULL) {
        funcr = record->function(record, comp, prop);
    }

    if (funcr != 0) {
        vcardproperty *errProp;
        vcardparameter *errParam;

        errParam =
            vcardparameter_new_xlicerrortype(VCARD_XLICERRORTYPE_RESTRICTIONCHECK);
        errProp = vcardproperty_vanew_xlicerror(funcr, errParam, 0);
        vcardcomponent_add_property(comp, errProp);
        vcardproperty_free(errProp);

        compare = 0;
    }

    return compare;
}

static int vcardrestriction_check_component(vcardproperty_version version,
                                            vcardcomponent *comp)
{
    vcardcomponent_kind comp_kind, inner_kind;
    vcardproperty_kind prop_kind;
    const vcardrestriction_record *start_record;
    vcardproperty *version_prop = NULL;
    vcardcomponent *inner_comp;
    const char *errStr = NULL;
    int count;
    int compare;
    int valid = 1;

    comp_kind = vcardcomponent_isa(comp);

    switch (comp_kind) {
    case VCARD_VCARD_COMPONENT:
        /* Get the VERSION property from the component */
        version_prop =
            vcardcomponent_get_first_property(comp, VCARD_VERSION_PROPERTY);
        break;

    default:
        break;
    }

    if (version_prop == 0) {
        version = VCARD_VERSION_NONE;
    } else {
        version = vcardproperty_get_version(version_prop);
    }

    if (errStr != NULL) {
        vcardproperty *errProp;
        vcardparameter *errParam;

        errParam =
            vcardparameter_new_xlicerrortype(VCARD_XLICERRORTYPE_RESTRICTIONCHECK);
        errProp = vcardproperty_vanew_xlicerror(errStr, errParam, 0);
        vcardcomponent_add_property(comp, errProp);
        vcardproperty_free(errProp);

        valid = 0;
    }

    /* Check all of the properties in this component */

    start_record = vcardrestriction_get_restriction(NULL, version, comp_kind,
                                                   VCARD_ANY_PROPERTY,
                                                   VCARD_NO_COMPONENT);

    if (start_record != &null_restriction_record) {

        for (prop_kind = VCARD_ANY_PROPERTY + 1;
             prop_kind != VCARD_NO_PROPERTY; prop_kind++) {

            const vcardrestriction_record *record =
                vcardrestriction_get_restriction(start_record, version, comp_kind,
                                                 prop_kind, VCARD_NO_COMPONENT);

            vcardproperty *prop =
                vcardcomponent_get_first_property(comp, prop_kind);

            count = vcardcomponent_count_properties(comp, prop_kind, 1);

            compare = _check_restriction(comp, record, count, prop);

            valid = valid && compare;
        }
    }

    /* Now check the inner components */

    start_record = vcardrestriction_get_restriction(start_record,
                                                    version, comp_kind,
                                                    VCARD_NO_PROPERTY,
                                                    VCARD_ANY_COMPONENT);

    if (start_record != &null_restriction_record) {

        for (inner_kind = VCARD_NO_COMPONENT + 3;
             inner_kind != VCARD_NUM_COMPONENT_TYPES; inner_kind++) {

            const vcardrestriction_record *record =
                vcardrestriction_get_restriction(start_record, version, comp_kind,
                                                VCARD_NO_PROPERTY, inner_kind);

            count = vcardcomponent_count_components(comp, inner_kind);

            compare = _check_restriction(comp, record, count, NULL);

            valid = valid && compare;
        }
    }

    for (inner_comp = vcardcomponent_get_first_component(comp, VCARD_ANY_COMPONENT);
         inner_comp != 0;
         inner_comp = vcardcomponent_get_next_component(comp, VCARD_ANY_COMPONENT)) {

        compare = vcardrestriction_check_component(version, inner_comp);

        valid = valid && compare;
    }

    return valid;
}

int vcardrestriction_check(vcardcomponent *outer_comp)
{
    vcardcomponent_kind comp_kind;
    int valid;

    icalerror_check_arg_rz((outer_comp != 0), "outer comp");

    comp_kind = vcardcomponent_isa(outer_comp);

    if (comp_kind != VCARD_VCARD_COMPONENT && comp_kind != VCARD_XROOT_COMPONENT) {
        icalerror_set_errno(ICAL_BADARG_ERROR);
        return 0;
    }

    /* Check the VCALENDAR wrapper */
    valid = vcardrestriction_check_component(VCARD_VERSION_NONE, outer_comp);

    return valid;
}

<insert_code_here>

static const vcardrestriction_record *vcardrestriction_get_restriction(
    const vcardrestriction_record *start,
    vcardproperty_version version, vcardcomponent_kind component,
    vcardproperty_kind property, vcardcomponent_kind subcomp)
{
    const vcardrestriction_record *rec;

    if (!start) {
        start = &vcardrestriction_records[0];
    }

    for (rec = start; rec && rec->restriction != VCARD_RESTRICTION_NONE; rec++) {

        if (version == rec->version &&
            (component == VCARD_ANY_COMPONENT ||
             (component == rec->component &&
              (property == VCARD_ANY_PROPERTY || property == rec->property) &&
              (subcomp == VCARD_ANY_COMPONENT || subcomp == rec->subcomponent)))) {
            return rec;
        }
    }

    return &null_restriction_record;
}
