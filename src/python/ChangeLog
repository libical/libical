2001-04-04  Eric Busboom  <eric@civicknowledge.com>

	* Component.py Added Calendar class. 

	* Componeny.py Changed all component constructor so they cannot
 	take string arguments. Now, only NewComponent() can turn an iCal
 	string into a component.

	
2001-04-02  Eric Busboom  <eric@civicknowledge.com>

	* Component.py removed arguments from the Event constructor, since
 	I presume that the Component derived classes will always be
 	constructed with no arguments.

	* Property.py Split out Attendee, Organizer, Time, Duration and
 	Period into their own files. Moved remaining classes to Derived
 	Properties.pm

	
2001-03-13  Eric Busboom  <eric@civicknowledge.com>

	* Component.py Added Component.property()

2001-03-10  Patrick Lewis <plewis@inetarena.com>

	* Added __str__ method to Collection.Collection

	* Component.Component can now be initialized without arguments

	* Made _singular_property and _multiple_properties (in Component)
	useful for nearly all the specific component interfaces

	* Changed Property.Attendee and Property.Organizer to allow creation
	with no arguments

	* Filled in Todo skeleton

	* Added test function for an Event


2001-03-05  Eric Busboom  <eric@civicknowledge.com>

	* Property.py Added a lot of exception code to signal failure to
 	create a Property.

	* DerivedProperties.py Added derived property classes for RDATE
 	and TRIGGER, two properties that can have one of two value types. 


2001-03-04  Eric Busboom  <eric@civicknowledge.com>

	* Property.pm Added Property.ConstructorFailedError exception

	* Component.pm fixed bug in Collection.__setslice__. "," used
 	instead of ":"

2001-03-04  Patrick Lewis <plewis@inetarena.com>
	
	* Split Libical.py file into Component.py, Property.py, Collection.py, 
	and Store.py

	* Added test_* functions to test.py

	* Changed component bindings to return a Collection when objects can 
	have multiple values

	* Changed Component object to allow for creation of an object without
	an initial string

	* Added Todo and Journal events

2001-02-28  Eric Busboom  <eric@civicknowledge.com>

	* Property Remove most internal data. The property now work
	almost entirely off of the icalproperty that it holds a reference
	to. Made changes in all derived Properties to accommodate the
	change.

	* Property Added __del__ 

	* Component Component.properties() now caches properties that it
 	constructs, so two calls to properties() to that get the same
 	icalproperty will also get the same Property.

	* Property Added Property.__cmp__ to test equality of properties
 	based on ical string values

2001-02-27  Eric Busboom  <eric@civicknowledge.com>

	* Property Added Property.ref() to set/get the reference to the
 	Property's internal icalproperty

	* Property Property._update_value now changes the icalproperty
 	value if a reference has been set.

	* Component re-instituted Component.properties(). The routine now
 	adds a 'ref' key to the dict that holds the python pointer
 	string. The C hex value of the pointer is in the 'pid' key
	

2001-02-27  Patrick Lewis  <plewis@inetarena.com>

	* Backed out changes to Component removing comp_p; 
	  Component.comp_p should be restored

2001-02-26  Eric Busboom  <eric@civicknowledge.com>

	* Period Added test routine,test_period()

	* Period implemented methods in period

	* Time Added addition and subtraction operators

2001-02-25  Eric Busboom  <eric@civicknowledge.com>

	* Libical.py Added test routine for time, time_test()

	* Libical.py Remove end of line chars ('\r\n" ) from
 	Property._str__. Caller should add these lines itself

	* Liical.py CHanges Time._update_values to set time VALUE type
 	based on use of is_date, rather than length of string.

	* Libical.py Removed call to _update_value in TIme::timezone
	

	* Libical.py changed update_value to _update_value

